INSERT_USER:-
DELIMITER //

CREATE PROCEDURE `insert_user` (
    IN p_fname VARCHAR(255),
    IN p_mname VARCHAR(255),
    IN p_lname VARCHAR(255),
    IN p_username VARCHAR(100),
    IN p_password VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_photo VARCHAR(110),
    IN p_registration_date DATETIME,
    IN p_status ENUM('Active', 'Inactive'),
    IN p_password_update_date DATETIME
)
BEGIN
    INSERT INTO `user` (
        `fname`, `mname`, `lname`, `username`, `password`, `email`,
        `photo`, `registration_date`, `status`, `password_update_date`
    ) VALUES (
        p_fname, p_mname, p_lname, p_username, p_password, p_email,
        p_photo, p_registration_date, p_status, p_password_update_date
    );
END //

DELIMITER ;



GET_USER_BY_EMAIL:-
DELIMITER //

CREATE PROCEDURE `get_user_by_email` (
    IN p_email VARCHAR(255)
)
BEGIN
    SELECT * FROM `User`
    WHERE `email` = p_email;
END //

DELIMITER ;



UPDATE_USER_STATUS:-
DELIMITER //

CREATE PROCEDURE `update_user_status` (
    IN p_user_id INT,
    IN p_user_status ENUM('Active', 'Inactive')
)
BEGIN
    UPDATE `user`
    SET `status` = p_user_status
    WHERE `user_id` = p_user_id;
END //

DELIMITER ;


SAVE_CHAT:-
DELIMITER //
 
CREATE PROCEDURE `insert_chat_message` (
    IN p_sender_id INT,
    IN p_receiver_id INT,
    IN p_message BLOB,
    IN p_timestamp DATETIME,
    IN p_message_status VARCHAR(50),
    In p_enc_key varchar(100)
)
BEGIN
    
 
    INSERT INTO chatting (sender_id, receiver_id, message, timestamp, message_status)
    VALUES (p_sender_id, p_receiver_id, AES_ENCRYPT(p_message, p_enc_key), p_timestamp, p_message_status);
 
    SELECT LAST_INSERT_ID() AS chat_id;
END //
 
DELIMITER ;


FETCH CHAT :-
DELIMITER //

CREATE PROCEDURE fetch_chat_messages(
    IN p_sender_id INT,
    IN p_receiver_id INT,
    In p_dec_key varchar(100)
)
BEGIN
    SELECT 
        m.sender_id,
        m.receiver_id,
        CAST(AES_DECRYPT(m.message, p_dec_key) AS CHAR) AS message,
        m.timestamp,
        m.message_status, 
        CONCAT(u1.fname, ' ', u1.lname) AS from_user_name, 
        CONCAT(u2.fname, ' ', u2.lname) AS to_user_name
    FROM 
        chatting m
    INNER JOIN 
        user u1 ON m.sender_id = u1.user_id
    INNER JOIN 
        user u2 ON m.receiver_id = u2.user_id
    WHERE 
        (m.sender_id = p_sender_id AND m.receiver_id = p_receiver_id) 
        OR 
        (m.sender_id = p_receiver_id AND m.receiver_id = p_sender_id)
    ORDER BY 
        m.timestamp ASC;
END //

DELIMITER ;


GET ALL USERS DATA  WITH STATUS:-
DELIMITER //

CREATE PROCEDURE get_all_users_data_with_status(
    IN p_user_id INT
)
BEGIN
    SELECT 
        u.user_id, 
        u.fname, 
        u.lname, 
        u.photo, 
        u.username,
        u.status,
        (
            SELECT COUNT(*)
            FROM chatting c
            WHERE c.receiver_id = p_user_id
            AND c.sender_id = u.user_id
            AND c.message_status = 'send'
        ) AS count_status
    FROM 
        user u;
END //

DELIMITER ;



UPDATE_USER_PASSWORD:-
DELIMITER //
 
CREATE PROCEDURE `update_user_password` (
    IN p_email VARCHAR(255),
    IN p_password VARCHAR(255)
)
BEGIN
    UPDATE `user`
    SET `password` = p_password
    WHERE `email` = p_email;
END //
 
DELIMITER ;


UPDATE CHAT STATUS:-
DELIMITER //

CREATE PROCEDURE update_chat_status (
    IN p_sender_id INT,
    IN p_receiver_id INT
)
BEGIN
    UPDATE chatting
    SET message_status = 'read'
    WHERE sender_id = p_sender_id AND 
          receiver_id = p_receiver_id AND
          message_status = 'send';
END //

DELIMITER ;


UPDATE USER:-
DELIMITER //

CREATE PROCEDURE update_user_details (
    IN p_user_id INT,
    IN p_fname VARCHAR(50),
    IN p_mname VARCHAR(50),
    IN p_lname VARCHAR(50),
    IN p_username VARCHAR(50),
    IN p_photo VARCHAR(255)
)
BEGIN
    UPDATE user
    SET 
        fname = p_fname,
        mname = IF(p_mname = '', NULL, p_mname),
        lname = p_lname,
        username = p_username,
        photo = p_photo
    WHERE 
        user_id = p_user_id;
END //

DELIMITER ;

INSERT/UPDATE otp:-

DELIMITER //
 
CREATE PROCEDURE GetValidOTP (IN p_email VARCHAR(255))

BEGIN

    SELECT id AS id, otp AS otp, UNIX_TIMESTAMP(expiry_timestamp) AS expiry_timestamp
    FROM otp_table

    WHERE email = p_email AND used = false

    LIMIT 1;

END //
 
DELIMITER ;

 

CHECK FOR OTP Validation:-
DELIMITER //
CREATE PROCEDURE `check_otp` (
    IN p_email VARCHAR(255)
)
BEGIN
    UPDATE `otp_table`
    SET `used` = true
    WHERE `email` = p_email;
END //
DELIMITER ;


UPDATE AND INSERT OTP :-

DELIMITER $$

CREATE PROCEDURE update_insert_otp (
    IN p_email VARCHAR(255),
    IN p_otp VARCHAR(255),
    IN p_expiry_time DATETIME,
    IN p_used BOOLEAN
)
BEGIN
    DECLARE existing_id INT;
    SELECT id INTO existing_id FROM otp_table WHERE email = p_email;

    IF existing_id IS NOT NULL THEN
        UPDATE otp_table
        SET otp = p_otp, expiry_timestamp = p_expiry_time, used = p_used WHERE id = existing_id;
    ELSE
        INSERT INTO otp_table (email, otp, expiry_timestamp, used)
        VALUES (p_email, p_otp, p_expiry_time, p_used);
    END IF;
END $$

DELIMITER ;




